parameters:
  - name: azureEnvName
    type: string
    default: "dev"
    displayName: "Azure Environment Name"
  - name: serviceConnection
    type: string
    default: "dev"
    displayName: "Azure Service Connection Name"
  - name: servicePrincipalId
    type: string
    displayName: "Environment-specific Azure Service Principal ID"

steps:
  - checkout: self

  # Uncomment the below task when using a Microsoft-hosted agent
  # - task: setup-azd@0
  #   displayName: Install azd

  # Uncomment the below task when using a self-hosted agent
  - task: PowerShell@2
    displayName: Install azd
    inputs:
      targetType: "inline"
      script: |
        powershell -ex AllSigned -c "Invoke-RestMethod 'https://aka.ms/install-azd.ps1' | Invoke-Expression"

  - task: AzureCLI@2
    displayName: Configure AZD to Use AZ CLI Authentication
    inputs:
      addSpnToEnvironment: true
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        azd config set auth.useAzCliAuth "true"

  - task: AzureCLI@2
    displayName: "Check if azd environment exists"
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: "ps"
      scriptLocation: "inlineScript"
      inlineScript: |
        $envExists = $false
        azd env list | ForEach-Object {
            $envName = ($_ -split "\s+")[0]
            if ($envName -eq "${{ parameters.azureEnvName }}") {
                $envExists = $true
            }
        }
        if ($envExists) {
            Write-Host "Environment already exists"
            echo "##vso[task.setvariable variable=envExists]true"
        } else {
            Write-Host "Environment does not exist"
            echo "##vso[task.setvariable variable=envExists]false"
        }

  - task: AzureCLI@2
    displayName: "Create new azd environment"
    condition: eq(variables['envExists'], 'false')
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: "ps"
      scriptLocation: "inlineScript"
      inlineScript: |
        azd env new ${{ parameters.azureEnvName }} --no-prompt
    env:
      AZURE_ENV_NAME: ${{ parameters.azureEnvName }}
      AZURE_LOCATION: $(AZURE_LOCATION)
      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

  - task: AzureCLI@2
    displayName: Refresh env
    inputs:
      addSpnToEnvironment: true
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        # Azure CLI login with service principal using federated token
        az login --service-principal -u ${{ parameters.servicePrincipalId }} --tenant $env:AZURE_TENANT_ID --federated-token $env:idToken -o none

        # Run azd package
        azd env refresh
    env:
      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
      AZURE_ENV_NAME: ${{ parameters.azureEnvName }}
      AZURE_LOCATION: $(AZURE_LOCATION)
      AZURE_SERVICE_CONNECTION: ${{ parameters.serviceConnection }}

  - task: AzureCLI@2
    displayName: Package Services
    inputs:
      addSpnToEnvironment: true
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        # Azure CLI login with service principal using federated token
        az login --service-principal -u ${{ parameters.servicePrincipalId }} --tenant $env:AZURE_TENANT_ID --federated-token $env:idToken -o none

        # Run azd package
        azd package --no-prompt
    env:
      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
      AZURE_ENV_NAME: ${{ parameters.azureEnvName }}
      AZURE_LOCATION: $(AZURE_LOCATION)
      AZURE_SERVICE_CONNECTION: ${{ parameters.serviceConnection }}

  - task: AzureCLI@2
    displayName: Deploy Services
    inputs:
      addSpnToEnvironment: true
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        # Azure CLI login with service principal using federated token
        az login --service-principal -u ${{ parameters.servicePrincipalId }} --tenant $env:AZURE_TENANT_ID --federated-token $env:idToken -o none

        # Run azd package
        azd deploy --no-prompt
    env:
      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
      AZURE_ENV_NAME: ${{ parameters.azureEnvName }}
      AZURE_LOCATION: $(AZURE_LOCATION)
      AZURE_SERVICE_CONNECTION: ${{ parameters.serviceConnection }}

  - task: DeleteFiles@1
    displayName: Delete working files
    inputs:
      SourceFolder: "$(Agent.WorkFolder)"
